"use client"

import type React from "react"
import { createContext, useContext, useEffect, useState } from "react"

type Theme = "light" | "dark" | "system"
type Language = "fr" | "en"

interface Translations {
  // Navigation (Chat & General)
  newConversation: string
  patient: string
  online: string
  secured: string
  navAccueil: string
  navAPropos: string
  navServices: string
  navFonctionnalites: string
  navDiagnostic: string
  navSupport: string
  navSeConnecter: string

  // Welcome screen (Chat)
  welcomeTitle: string
  welcomeDescription: string
  inputPlaceholder: string
  continuePlaceholder: string
  popularSuggestions: string


  // Homepage Hero
  heroTitle1: string
  heroTitle2: string
  heroTitle3: string
  heroTitle4: string
  heroDescription: string
  heroBtnStart: string
  heroBtnLearnMore: string
  heroStatPatients: string
  heroStatSatisfaction: string
  heroStatAvailability: string

  // General
  copyright: string

  // Health suggestions (Chat)
  cardiology: string
  cardiovascularPrevention: string
  neurology: string
  strokeSigns: string
  medications: string
  antibioticsUsage: string
  diabetes: string
  glucoseControl: string
  prevention: string
  immuneSystem: string
  symptoms: string
  persistentFever: string

  // Profile
  editProfile: string
  modifyProfile: string
  profilePhoto: string
  autoGenerated: string
  email: string
  emailCannotChange: string
  fullName: string
  deleteAccount: string
  deleteAccountTitle: string
  deleteAccountDescription: string
  deleteAccountWarning: string
  deleteAccountConfirm: string
  signOut: string
  cancel: string

  // Messages
  filesAttached: string
  confidence: string
}

const translations: Record<Language, Translations> = {
  fr: {
    // Navigation (Chat & General)
    newConversation: "Nouvelle conversation",
    patient: "Patient",
    online: "En ligne",
    secured: "Sécurisé",
    navAccueil: "Accueil",
    navAPropos: "À propos",
    navServices: "Services",
    navFonctionnalites: "Fonctionnalités",
    navDiagnostic: "Diagnostic",
    navSupport: "Support 24/7",
    navSeConnecter: "Se connecter",

    // Welcome screen (Chat)
    welcomeTitle: "Comment puis-je vous aider aujourd'hui ?",
    welcomeDescription:
      "Posez-moi vos questions de santé, partagez vos documents médicaux ou décrivez vos symptômes. Je peux analyser vos examens, photos et vous fournir des informations personnalisées.",
    inputPlaceholder: "Décrivez vos symptômes, posez une question ou envoyez des documents...",
    continuePlaceholder: "Continuez votre conversation...",
    popularSuggestions: "Suggestions populaires",

    // Homepage Hero
    heroTitle1: "DOCAI : VOTRE",
    heroTitle2: "ASSISTANT",
    heroTitle3: "MÉDICAL",
    heroTitle4: "INTELLIGENT",
    heroDescription: "DocIA est votre compagnon santé intelligent qui vous accompagne dans vos questions médicales avec des réponses fiables et personnalisées, disponible 24h/24 et 7j/7.",
    heroBtnStart: "Commencer maintenant",
    heroBtnLearnMore: "En savoir plus",
    heroStatPatients: "Patients",
    heroStatSatisfaction: "Satisfaction",
    heroStatAvailability: "Disponible",

    // General
    copyright: "© 2025 DocIA - Douala General Hospital. Tous droits réservés.",

    // Health suggestions (Chat)
    cardiology: "Cardiologie",
    cardiovascularPrevention: "Comment prévenir les maladies cardiovasculaires ?",
    neurology: "Neurologie",
    strokeSigns: "Quels sont les signes d'un AVC ?",
    medications: "Médicaments",
    antibioticsUsage: "Comment prendre correctement les antibiotiques ?",
    diabetes: "Diabète",
    glucoseControl: "Comment contrôler sa glycémie au quotidien ?",
    prevention: "Prévention",
    immuneSystem: "Comment renforcer son système immunitaire ?",
    symptoms: "Symptômes",
    persistentFever: "Que faire en cas de fièvre persistante ?",

    // Profile
    editProfile: "Modifier le profil",
    modifyProfile: "Modifier le profil",
    profilePhoto: "Photo de profil",
    autoGenerated: "Générée automatiquement à partir de votre nom",
    email: "Email",
    emailCannotChange: "L'email ne peut pas être modifié",
    fullName: "Nom complet",
    deleteAccount: "Supprimer le compte",
    deleteAccountTitle: "Supprimer le compte",
    deleteAccountDescription: "Cette action est irréversible. Toutes vos conversations seront supprimées.",
    deleteAccountWarning: "Cette action supprimera définitivement votre compte et toutes vos données.",
    deleteAccountConfirm: "Supprimer définitivement",
    signOut: "Se déconnecter",
    cancel: "Annuler",

    // Messages
    filesAttached: "Fichiers",
    confidence: "confiance",
  },
  en: {
    // Navigation (Chat & General)
    newConversation: "New conversation",
    patient: "Patient",
    online: "Online",
    secured: "Secured",
    navAccueil: "Home",
    navAPropos: "About",
    navServices: "Services",
    navFonctionnalites: "Features",
    navDiagnostic: "Diagnosis",
    navSupport: "Support 24/7",
    navSeConnecter: "Sign In",

    // Welcome screen (Chat)
    welcomeTitle: "How can I help you today?",
    welcomeDescription:
      "Ask me your health questions, share your medical documents or describe your symptoms. I can analyze your exams, photos and provide you with personalized information.",
    inputPlaceholder: "Describe your symptoms, ask a question or send documents...",
    continuePlaceholder: "Continue your conversation...",
    popularSuggestions: "Popular suggestions",

    // Homepage Hero
    heroTitle1: "DOCAI: YOUR",
    heroTitle2: "INTELLIGENT",
    heroTitle3: "MEDICAL",
    heroTitle4: "ASSISTANT",
    heroDescription: "DocIA is your intelligent health companion that supports you with your medical questions with reliable and personalized answers, available 24/7.",
    heroBtnStart: "Get started now",
    heroBtnLearnMore: "Learn more",
    heroStatPatients: "Patients",
    heroStatSatisfaction: "Satisfaction",
    heroStatAvailability: "Available",

    // General
    copyright: "© 2025 DocIA - Douala General Hospital. All rights reserved.",

    // Health suggestions (Chat)
    cardiology: "Cardiology",
    cardiovascularPrevention: "How to prevent cardiovascular diseases?",
    neurology: "Neurology",
    strokeSigns: "What are the signs of a stroke?",
    medications: "Medications",
    antibioticsUsage: "How to take antibiotics correctly?",
    diabetes: "Diabetes",
    glucoseControl: "How to control blood sugar daily?",
    prevention: "Prevention",
    immuneSystem: "How to strengthen your immune system?",
    symptoms: "Symptoms",
    persistentFever: "What to do in case of persistent fever?",

    // Profile
    editProfile: "Edit profile",
    modifyProfile: "Edit profile",
    profilePhoto: "Profile photo",
    autoGenerated: "Automatically generated from your name",
    email: "Email",
    emailCannotChange: "Email cannot be changed",
    fullName: "Full name",
    deleteAccount: "Delete account",
    deleteAccountTitle: "Delete account",
    deleteAccountDescription: "This action is irreversible. All your conversations will be deleted.",
    deleteAccountWarning: "This action will permanently delete your account and all your data.",
    deleteAccountConfirm: "Delete permanently",
    signOut: "Sign out",
    cancel: "Cancel",

    // Messages
    filesAttached: "Files",
    confidence: "confidence",
  },
}

interface ThemeContextType {
  theme: Theme
  setTheme: (theme: Theme) => void
  language: Language
  setLanguage: (language: Language) => void
  t: Translations
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined)

export function ThemeProvider({ children }: { children: React.ReactNode }) {
  const [theme, setThemeState] = useState<Theme>(() => {
    if (typeof window === "undefined") return "system" // Default for SSR
    return (localStorage.getItem("theme") as Theme) || "system"
  })
  const [language, setLanguageState] = useState<Language>(() => {
    if (typeof window === "undefined") return "fr" // Default for SSR
    const storedLang = localStorage.getItem("language") as Language
    if (storedLang && ["fr", "en"].includes(storedLang)) return storedLang
    const browserLang = navigator.language.toLowerCase()
    return browserLang.startsWith("en") ? "en" : "fr"
  })

  useEffect(() => {
    const root = window.document.documentElement
    root.classList.remove("light", "dark")

    let effectiveTheme = theme
    if (theme === "system") {
      effectiveTheme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light"
    }
    root.classList.add(effectiveTheme)
  }, [theme])

  const setTheme = (newTheme: Theme) => {
    localStorage.setItem("theme", newTheme)
    setThemeState(newTheme)
  }

  const setLanguage = (newLanguage: Language) => {
    localStorage.setItem("language", newLanguage)
    setLanguageState(newLanguage)
  }

  const value = {
    theme,
    setTheme,
    language,
    setLanguage,
    t: translations[language],
  }

  return <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>
}

export function useTheme() {
  const context = useContext(ThemeContext)
  if (context === undefined) {
    throw new Error("useTheme must be used within a ThemeProvider")
  }
  return context
}
